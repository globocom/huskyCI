enry:
  name: enry
  image: huskyci/enry
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneEnry
    if [ $? -eq 0 ]; then
      cd code
      enry --json | tr -d '\r\n'
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneEnry
    fi
  language: Generic
  default: true
  timeOutInSeconds: 60

gosec:
  name: gosec
  image: huskyci/gosec
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    cd src
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneGosec
    if [ $? -eq 0 ]; then
      cd code
      touch results.json
      /go/bin/gosec -quiet -fmt=json -log=log.txt -out=results.json ./... 2> /dev/null
      jq -j -M -c . results.json
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneGosec
    fi
  language: Go
  default: true
  timeOutInSeconds: 360

bandit:
  name: bandit
  image: huskyci/bandit
  cmd: |+
     mkdir -p ~/.ssh &&
     echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
     chmod 600 ~/.ssh/huskyci_id_rsa &&
     echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
     echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
     git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneBandit
     if [ $? -eq 0 ]; then
       cd code
       bandit -r . -f json 2> /dev/null > results.json
       jq -j -M -c . results.json
     else
       echo "ERROR_CLONING"
       cat /tmp/errorGitCloneBandit
     fi
  language: Python
  default: true
  timeOutInSeconds: 360

brakeman:
  name: brakeman
  image: huskyci/brakeman
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    mkdir app
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% ./app/code --quiet 2> /tmp/errorGitCloneBrakeman
    if [ $? -eq 0 ]; then
      brakeman -q -o results.json .
      jq -j -M -c . results.json
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneBrakeman
    fi
  language: Ruby
  default: true
  timeOutInSeconds: 360

retirejs:
  name: retirejs
  image: huskyci/retirejs
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo 'IdentityFile ~/.ssh/huskyci_id_rsa' >> /etc/ssh/ssh_config &&
    echo 'StrictHostKeyChecking no' >> /etc/ssh/ssh_config &&
    useInternalDependencies=0
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneRetirejs
    if [ $? -eq 0 ]; then
      cd code
      if [ "%INTERNAL_DEP_URL%" != "" ]; then
        useInternalDependencies=1
      fi
      if [ -f yarn.lock ]; then
        yarn install >/dev/null 2>&1
        retire -n --outputformat json --outputpath /tmp/results.json --exitwith 0 2>/dev/null
        cat /tmp/results.json
      elif [ -f src/yarn.lock ]; then
        cd src/
        yarn install >/dev/null 2>&1
        retire -n --outputformat json --outputpath /tmp/results.json --exitwith 0 2>/dev/null
        cat /tmp/results.json
      elif [ -f package.json ] || [ -f package-lock.json ]; then
        if [ $useInternalDependencies == 1 ]; then
          npm config set registry %INTERNAL_DEP_URL%
        fi
        npm install >/dev/null 2>&1
        retire -n --outputformat json --outputpath /tmp/results.json --exitwith 0 2>/dev/null
        cat /tmp/results.json 
      elif [ -f src/package.json ] || [ -f src/package-lock.json ]; then
        cd src/
        if [ $useInternalDependencies == 1 ]; then
          npm config set registry %INTERNAL_DEP_URL%
        fi
        npm install >/dev/null 2>&1
        retire -n --outputformat json --outputpath /tmp/results.json --exitwith 0 2>/dev/null
        cat /tmp/results.json 
      else
        echo 'ERROR_RUNNING_RETIREJS'
      fi
    else
      echo 'ERROR_CLONING'
      cat /tmp/errorGitCloneRetirejs
    fi
  language: JavaScript
  default: true
  timeOutInSeconds: 360

safety:
  name: safety
  image: huskyci/safety
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneSafety
    if [ $? -eq 0 ]; then
      cd code
      if [ -f requirements.txt ]; then
        cat requirements.txt | grep '=' | grep -v '#' 1> safety_huskyci_analysis_requirements_raw.txt
        sed -i -e 's/>=/==/g; s/<=/==/g' safety_huskyci_analysis_requirements_raw.txt
        cat safety_huskyci_analysis_requirements_raw.txt | cut -f1 -d "," > safety_huskyci_analysis_requirements.txt
        safety check -r safety_huskyci_analysis_requirements.txt --json > safety_huskyci_analysis_output.json 2> /tmp/errorRunning
        safety check -r safety_huskyci_analysis_requirements_raw.txt --json > /dev/null 2> /tmp/warning
        if [ -f /tmp/warning ]; then
          if grep -q "unpinned requirement" "/tmp/warning"; then
            cat /tmp/warning
          fi
          chmod +x /script.sh
          /script.sh safety_huskyci_analysis_output.json
          cat output.json
        else
          echo "ERROR_RUNNING_SAFETY"
          cat /tmp/errorRunning 
        fi
      else
        echo "ERROR_REQ_NOT_FOUND"  
      fi
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneSafety
    fi
  language: Python
  default: true
  timeOutInSeconds: 360

npmaudit:
  name: npmaudit
  image: huskyci/npmaudit
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneNpmAudit
    if [ $? -eq 0 ]; then
      cd code
      if [ -f package-lock.json ]; then
        npm audit --only=prod --json > /tmp/results.json 2> /tmp/errorNpmaudit
        jq -j -M -c . /tmp/results.json
      else
        echo 'ERROR_RUNNING_NPMAUDIT'
      fi
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneSafety
    fi
  language: JavaScript
  default: true
  timeOutInSeconds: 360
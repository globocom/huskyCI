enry:
  name: enry
  image: huskyci/enry
  imageTag: dev-fd3c31c
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneEnry
    if [ $? -eq 0 ]; then
      cd code
      enry --json | tr -d '\r\n'
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneEnry
    fi
  type: Enry
  default: true
  timeOutInSeconds: 60

gitauthors:
  name: gitauthors
  image: huskyci/gitauthors
  imageTag: "2.18.1"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone %GIT_REPO% code --quiet 2> /tmp/errorGitCloneEnry
    cd code
    git checkout %GIT_BRANCH% --quiet
    if [ $? -eq 0 ]; then
      for i in $(git log origin/master.. --pretty="%ae" | sort -u); do
        jsonMiddle="\"$i\",$jsonMiddle"
      done
      length=${#jsonMiddle}
      endindex=$(expr $length - 1)
      authors="${jsonMiddle:0:$endindex}"
      echo "{\"authors\":[$authors]}"
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneEnry
    fi
  type: Generic
  default: true
  timeOutInSeconds: 60

gosec:
  name: gosec
  image: huskyci/gosec
  imageTag: "2.0.0"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    cd src
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneGosec
    if [ $? -eq 0 ]; then
      cd code
      touch results.json
      /go/bin/gosec -quiet -fmt=json -log=log.txt -out=results.json ./... 2> /dev/null
      jq -j -M -c . results.json
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneGosec
    fi
  type: Language
  language: Go
  default: true
  timeOutInSeconds: 360

bandit:
  name: bandit
  image: huskyci/bandit
  imageTag: "1.6.2"
  cmd: |+
     mkdir -p ~/.ssh &&
     echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
     chmod 600 ~/.ssh/huskyci_id_rsa &&
     echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
     echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
     git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneBandit
     if [ $? -eq 0 ]; then
       cd code
       bandit -r . -f json 2> /dev/null > results.json
       jq -j -M -c . results.json
     else
       echo "ERROR_CLONING"
       cat /tmp/errorGitCloneBandit
     fi
  type: Language
  language: Python
  default: true
  timeOutInSeconds: 360

brakeman:
  name: brakeman
  image: huskyci/brakeman
  imageTag: "4.6.1"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    mkdir app
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% ./app/code --quiet 2> /tmp/errorGitCloneBrakeman
    if [ $? -eq 0 ]; then
      brakeman -q -o results.json .
      jq -j -M -c . results.json
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneBrakeman
    fi
  type: Language
  language: Ruby
  default: true
  timeOutInSeconds: 360

safety:
  name: safety
  image: huskyci/safety
  imageTag: "1.8.5"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneSafety
    if [ $? -eq 0 ]; then
      cd code
      if [ -f requirements.txt ]; then
        cat requirements.txt | grep '=' | grep -v '#' 1> safety_huskyci_analysis_requirements_raw.txt
        sed -i -e 's/>=/==/g; s/<=/==/g' safety_huskyci_analysis_requirements_raw.txt
        cat safety_huskyci_analysis_requirements_raw.txt | cut -f1 -d "," > safety_huskyci_analysis_requirements.txt
        safety check -r safety_huskyci_analysis_requirements.txt --json > safety_huskyci_analysis_output.json 2> /tmp/errorRunning
        safety check -r safety_huskyci_analysis_requirements_raw.txt --json > /dev/null 2> /tmp/warning
        if [ -f /tmp/warning ]; then
          if grep -q "unpinned requirement" "/tmp/warning"; then
            cat /tmp/warning
          fi
          chmod +x /script.sh
          /script.sh safety_huskyci_analysis_output.json
          cat output.json
        else
          echo "ERROR_RUNNING_SAFETY"
          cat /tmp/errorRunning
        fi
      else
        echo "ERROR_REQ_NOT_FOUND"
      fi
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneSafety
    fi
  type: Language
  language: Python
  default: true
  timeOutInSeconds: 360

npmaudit:
  name: npmaudit
  image: huskyci/npmaudit
  imageTag: "6.10.3"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneNpmAudit
    if [ $? -eq 0 ]; then
      cd code
      if [ -f package-lock.json ]; then
        npm audit --only=prod --json > /tmp/results.json 2> /tmp/errorNpmaudit
        jq -j -M -c . /tmp/results.json
      else
        echo 'ERROR_PACKAGE_LOCK_NOT_FOUND'
      fi
    else
      echo "ERROR_CLONING"
      cat /tmp/errorGitCloneNpmAudit
    fi
  type: Language
  language: JavaScript
  default: true
  timeOutInSeconds: 360

yarnaudit:
  name: yarnaudit
  image: huskyci/yarnaudit
  imageTag: "1.17.3"
  cmd: |+
    mkdir -p ~/.ssh &&
    echo 'GIT_PRIVATE_SSH_KEY' > ~/.ssh/huskyci_id_rsa &&
    chmod 600 ~/.ssh/huskyci_id_rsa &&
    echo "IdentityFile ~/.ssh/huskyci_id_rsa" >> /etc/ssh/ssh_config &&
    echo "StrictHostKeyChecking no" >> /etc/ssh/ssh_config &&
    git clone -b %GIT_BRANCH% --single-branch %GIT_REPO% code --quiet 2> /tmp/errorGitCloneYarnAudit
    if [ $? -eq 0 ]; then
        cd code
        pathLock=$(dirname "$(find . -name 'yarn.lock')")
        if [ $? -eq 0 ]; then
            cd $pathLock
            yarn audit --json > /tmp/results.json 2> /tmp/errorYarnAudit
            if [ ! -s /tmp/errorYarnAudit ]; then
                jq -c -M -j --slurp '{advisories: (. | map(select(.type == "auditAdvisory") | .data.advisory)), metadata: (. | map(select(.type == "auditSummary") | .data) | add)}' /tmp/results.json > /tmp/output.json
                cat /tmp/output.json
            else
                echo -n 'ERROR_RUNNING_YARN_AUDIT'
                cat /tmp/errorYarnAudit
            fi
        else
            echo 'ERROR_YARN_LOCK_NOT_FOUND'
        fi
    else
        echo "ERROR_CLONING"
        cat /tmp/errorGitCloneYarnAudit
    fi
  type: Language
  language: JavaScript
  default: true
  timeOutInSeconds: 360
